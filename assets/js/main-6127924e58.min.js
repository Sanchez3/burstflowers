"use strict";

(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;if (!f && c) return c(i, !0);if (u) return u(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
                }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {
                    var n = e[i][1][r];return o(n || r);
                }, p, p.exports, r, e, n, t);
            }return n[i].exports;
        }for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
            o(t[i]);
        }return o;
    }return r;
})()({ "/Users/sanchez/Work/Training/burstflowers/src/assets/js/main.js": [function (require, module, exports) {
        /**
         * Created by Sanchez 
         */
        'use strict';

        var config = {
            'width': 1024,
            'height': 1024,
            'render': Phaser.AUTO,
            'parent': 'canvas-wrapper',
            'transparent': true
        };
        window.game = new Phaser.Game(config);
        window.game.state.add('Boot', require('./states/boot'));
        window.game.state.add('Preloader', require('./states/preloader'));
        window.game.state.add('State1', require('./states/state1'));
        window.game.state.start('Boot');

        //Can Use ES6 
        var use_e6 = true;

        window.h5 = {
            isPc: function isPc() {
                var userAgentInfo = navigator.userAgent;
                var Agents = new Array('Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod');
                var flag = true;
                for (var v = 0; v < Agents.length; v++) {
                    if (userAgentInfo.indexOf(Agents[v]) > 0) {
                        flag = false;break;
                    }
                }
                return flag;
            },
            rootResize: function rootResize() {
                //orientation portrait width=750px height=1334px / WeChat width=750px height=1206px 
                var wFsize;
                //screen.width screen.height  bug !!!
                // var wWidth = (screen.width > 0) ? (window.innerWidth >= screen.width || window.innerWidth == 0) ? screen.width :
                //     window.innerWidth : window.innerWidth;
                // var wHeight = (screen.height > 0) ? (window.innerHeight >= screen.height || window.innerHeight == 0) ?
                //     screen.height : window.innerHeight : window.innerHeight;
                var wWidth = window.innerWidth;
                var wHeight = window.innerHeight;
                if (wWidth > wHeight) {
                    wFsize = wHeight / 750 * 100;
                } else {
                    wFsize = wWidth / 750 * 100;
                }

                document.getElementsByTagName('html')[0].style.fontSize = wFsize + 'px';
            },
            eventInit: function eventInit() {
                var that = this;
                document.addEventListener('touchstart', function (e) {}, false);
                document.addEventListener('touchmove', function (e) {
                    e.preventDefault();
                }, false);
                return that;
            },
            cssInit: function cssInit() {
                var that = this;
                var noChangeCountToEnd = 100,
                    noEndTimeout = 1000;
                that.rootResize();
                window.addEventListener('onorientationchange' in window ? 'orientationchange' : 'resize', function () {
                    var interval, timeout, end, lastInnerWidth, lastInnerHeight, noChangeCount;
                    end = function end() {
                        // 'orientationchangeend'
                        clearInterval(interval);
                        clearTimeout(timeout);
                        interval = null;
                        timeout = null;
                        that.rootResize();
                    };
                    interval = setInterval(function () {
                        if (window.innerWidth === lastInnerWidth && window.innerHeight === lastInnerHeight) {
                            noChangeCount++;
                            if (noChangeCount === noChangeCountToEnd) {
                                // The interval resolved the issue first.
                                end();
                            }
                        } else {
                            lastInnerWidth = window.innerWidth;
                            lastInnerHeight = window.innerHeight;
                            noChangeCount = 0;
                        }
                    });
                    timeout = setTimeout(function () {
                        // The timeout happened first.
                        end();
                    }, noEndTimeout);
                });

                return that;
            },
            init: function init() {
                var that = this;
                that.cssInit().eventInit();
            }
        };

        window.onload = function () {
            window.h5.init();
            showStats();
        };

        function showStats() {
            var stats = new Stats();
            stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
            var fs = document.createElement('div');
            fs.style.position = 'absolute';
            fs.style.left = 0;
            fs.style.top = 0;
            fs.style.zIndex = 999;
            fs.appendChild(stats.domElement);
            document.body.appendChild(fs);

            function animate() {
                stats.begin();
                // monitored code goes here
                stats.end();
                requestAnimationFrame(animate);
            }
            requestAnimationFrame(animate);
        }
    }, { "./states/boot": "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/boot.js", "./states/preloader": "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/preloader.js", "./states/state1": "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/state1.js" }], "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/boot.js": [function (require, module, exports) {
        (function () {
            'use strict';

            var Boot = function Boot() {};

            module.exports = Boot;

            Boot.prototype = {
                preload: function preload() {
                    // More detail in Phaser Docs - http://phaser.io/docs/2.6.2/Phaser.Loader.html
                    // To add a SpriteSheet to the loader use the following:
                    // this.load.spritesheet(key, url, frameWidth, frameHeight, frameMax, margin, spacing);

                    // Texture Atlas which the frames are usually variable in size 
                    // and come with a json or xml file that describes their structure. Sometimes a Texture Atlas
                    // Usually use tools such as TexturePacker and Shoebox to create
                    // To add Texture Atlas a the loader use the following:
                    // this.load.atlas(key, textureURL, atlasURL, atlasData, format);

                    // Video
                    // Wechat app can not support 'canplay' 'canplaythrough' 'loadstart' 'loadeddata' 'loadedmetadata'
                    // this.load.video(key, urls, loadEvent, asBlob);

                    // image
                    // this.load.image(key, url, overwrite);
                },

                create: function create() {
                    // configure game
                    this.game.input.maxPointers = 1;
                    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                    this.scale.pageAlignHorizontally = true;
                    this.scale.pageAlignVertically = true;
                    this.stage.disableVisibilityChange = true;
                    this.game.state.start('Preloader');
                }

            };
        })();
    }, {}], "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/preloader.js": [function (require, module, exports) {
        /**
         * Created by Sanchez
         */
        (function () {
            'use strict';

            var Preloader = function Preloader() {};

            module.exports = Preloader;

            Preloader.prototype = {
                loadResources: function loadResources() {

                    // for (var i = 1; i <= 26; i++) {
                    //     this.load.image('p' + i, '../assets/img/p' + i + '.png');
                    // }
                    this.load.image('hand', '../assets/img/hand.png');
                    this.load.image('man', '../assets/img/man.png');
                    this.load.image('flowers', '../assets/img/flowers@1024.png');
                    this.load.image('umbrella', '../assets/img/umbrella.png');

                    this.load.atlasJSONHash('p_sprites', '../assets/img/p_sprites.png', '../assets/img/p_sprites.json');
                    this.load.start();
                },
                drawPieProgress: function drawPieProgress(_progress) {
                    var that = this;
                    that.pgGraphics.clear();
                    that.pgGraphics.lineStyle(6, 0x29ABE2);
                    that.pgGraphics.arc(this.game.width / 2, this.game.height / 2, 45, this.game.math.degToRad(270), this.game.math.degToRad(360 * _progress / 100 + 270), false);
                    that.pgGraphics.endFill();
                },
                create: function create() {
                    var that = this;
                    that.pgGraphics = this.add.graphics(0, 0);
                    var style = {
                        fontStyle: 'italic',
                        font: 'Helvetica Neue,Helvetica,Arial,Microsoft Yahei,Hiragino Sans GB,Heiti SC,WenQuanYi Micro Hei',
                        fontSize: 19,
                        fill: '#000',
                        align: 'center'
                    };
                    that.progress = this.add.text(this.game.width / 2, this.game.height / 2 + 5, '0%', style);
                    that.progress.anchor.setTo(0.5);
                    this.load.onFileComplete.add(that.onfileComplete, this);
                    this.load.onLoadComplete.addOnce(that.onLoadComplete, this);
                    this.loadResources();
                },
                onLoadComplete: function onLoadComplete() {
                    var that = this;
                    that.game.state.start('State1');
                    return;
                },
                onfileComplete: function onfileComplete(progress, cacheKey, success, totalLoaded, totalFiles) {
                    var that = this;
                    that.drawPieProgress(progress);
                    that.progress.text = progress + '%';
                }
            };
        })();
    }, {}], "/Users/sanchez/Work/Training/burstflowers/src/assets/js/states/state1.js": [function (require, module, exports) {
        /**
         * Created by Sanchez
         */
        (function () {
            'use strict';

            var State1 = function State1() {};
            module.exports = State1;
            var countTime = 0;
            State1.prototype = {
                create: function create() {

                    //  Texture must be power-of-two sized or the filter will break


                    var parray = [];
                    for (var i = 1; i <= 26; i++) {
                        parray.push('p' + i + '.png');
                    }
                    var man_emitter = this.add.emitter(this.game.world.centerX - 20, this.game.world.centerY + 250, 200);
                    man_emitter.makeParticles('p_sprites', parray);
                    man_emitter.gravity = 0;
                    man_emitter.setAlpha(0.7, 1, 0);
                    man_emitter.maxParticleScale = 1;
                    man_emitter.minParticleScale = 0.5;
                    man_emitter.setRotation(-30, 30);
                    man_emitter.setXSpeed(0, 0);
                    man_emitter.setYSpeed(0, 0);
                    man_emitter.alpha = 0;
                    man_emitter.flow(15000, 1500, 4, -1);
                    man_emitter.setAlpha(1, 0, 9000, Phaser.Easing.Quartic.In);

                    this.m = this.add.sprite(this.game.world.centerX, this.game.world.centerY + 200, 'man');
                    this.m.anchor.setTo(0.5);

                    var flowers = this.add.sprite(0, 0, 'flowers');
                    var fragmentSrc1 = ["precision mediump float;", "uniform float     time;", "uniform vec2      resolution;", "uniform sampler2D iChannel0;", "void main( void ) {", "vec2 uv = gl_FragCoord.xy / resolution.xy;", "// Flip-a-roo.", "uv.y *= -1.0;", "// Represents the v/y coord(0 to 1) that will not sway.", "float fixedBasePosY = 0.0;", "// Configs for you to get the sway just right.", "float speed = 2.0;", "float verticleDensity = 3.0;", "float swayIntensity = 0.02;", "// Putting it all together.", "float offsetX = sin(uv.y * verticleDensity + time * speed) * swayIntensity;", "// Offsettin the u/x coord.", "uv.x += offsetX * (uv.y - fixedBasePosY);", "gl_FragColor = texture2D(iChannel0, uv);", "}"];
                    var customUniforms = {
                        iChannel0: { type: 'sampler2D', value: flowers.texture, textureData: { repeat: true } }
                    };
                    this.mfilter = new Phaser.Filter(this.game, customUniforms, fragmentSrc1);
                    this.mfilter.setResolution(1024, 1024);
                    // this.mfilter.addToWorld(this.game.world.centerX,this.game.world.centerY,2048,2048,0.5,0.5)
                    flowers.filters = [this.mfilter];

                    var top_emitter = this.add.emitter(this.game.world.centerX, this.game.world.centerY - 180, 200);
                    top_emitter.makeParticles('p_sprites', parray);
                    top_emitter.setAlpha(0.5, 0, 10000, Phaser.Easing.Quartic.In);
                    top_emitter.gravity = -10;
                    top_emitter.maxParticleScale = 0.8;
                    top_emitter.minParticleScale = 0.5;
                    top_emitter.setRotation(-30, 30);
                    top_emitter.flow(15000, 1500, 3, -1);
                    top_emitter.width = 200;
                    top_emitter.setYSpeed(-100, 0);

                    var bottom_emitter = this.add.emitter(this.game.world.centerX, this.game.world.centerY - 180, 1000);
                    bottom_emitter.makeParticles('p_sprites', parray);
                    bottom_emitter.width = 170;
                    bottom_emitter.bringToTop = true;
                    bottom_emitter.maxParticleScale = 1.1;
                    bottom_emitter.minParticleScale = 0.4;
                    bottom_emitter.setXSpeed(-100, 100);
                    bottom_emitter.setScale(0.4, 1.4, 0.4, 1.4, 12000, Phaser.Easing.Sinusoidal.InOut);
                    // bottom_emitter.setYSpeed(0, 100);
                    // emitter.minParticleSpeed.set(-100, 10);
                    // emitter.setXSpeed(-100, 100);
                    // emitter.setYSpeed(200, 200);
                    bottom_emitter.setRotation(-30, 30);
                    bottom_emitter.setAlpha(1, 0, 15000, Phaser.Easing.Quartic.In);
                    bottom_emitter.gravity = 30;

                    // emitter.start(false, 0, 150);
                    bottom_emitter.flow(15000, 1500, 5, -1);
                    // emitter.emitX=0;
                    var speed = { x: 200, y: 0 };

                    this.bottom_emitter = bottom_emitter;
                    this.top_emitter = top_emitter;
                    this.man_emitter = man_emitter;

                    this.firstP = false;
                    this.u = this.add.sprite(this.game.world.centerX, this.game.world.centerY - 100, 'umbrella');
                    this.u.anchor.setTo(0.5);

                    var hand = this.add.image(this.game.world.centerX, this.game.world.centerY + 150, 'hand');
                    hand.anchor.setTo(0.5);
                    TweenMax.to(hand.scale, 0.8, {
                        x: 0.9,
                        y: 0.9,
                        repeat: 5,
                        yoyo: true,
                        yoyoEase: Power2.easeIn,
                        onComplete: function onComplete() {
                            // TweenMax.to(hand, 0.3, { alpha: 0 })
                        }
                    });
                },
                update: function update() {
                    var that = this;
                    that.mfilter.update();

                    if (this.game.input.activePointer.isDown) {
                        countTime++;
                        this.firstP = true;
                        this.top_emitter.maxParticleScale = 1.2;
                        this.bottom_emitter.maxParticleScale = 1.3;

                        this.man_emitter.alpha = 1;
                        this.man_emitter.setXSpeed(-300, 300);
                        this.man_emitter.setYSpeed(-300, 300);

                        if (this.bottom_emitter.frequency > 200) {
                            if (this.bottom_emitter.gravity < 100) {
                                this.bottom_emitter.gravity++;
                            }
                            this.top_emitter.frequency -= 50;
                            this.bottom_emitter.frequency -= 50;
                            this.man_emitter.frequency -= 50;
                        }
                    }
                    if (this.firstP && this.game.input.activePointer.isUp) {

                        this.man_emitter.setXSpeed(0, 0);
                        this.man_emitter.setYSpeed(0, 0);
                        // this.man_emitter.alpha = 0;
                        // TweenMax.to(this.man_emitter,0.3,{alpha:0});

                        this.firstP = false;
                        countTime = 0;
                        TweenMax.to(this.bottom_emitter, 0.3, {
                            gravity: 30

                        });
                        TweenMax.to([this.top_emitter, this.bottom_emitter, this.man_emitter], 0.3, {
                            frequency: 1500,
                            onComplete: function onComplete() {
                                that.top_emitter.maxParticleScale = 0.8;
                                that.bottom_emitter.maxParticleScale = 1.1;
                            }
                        });
                    }
                }
            };
        })();
    }, {}] }, {}, ["/Users/sanchez/Work/Training/burstflowers/src/assets/js/main.js"]);